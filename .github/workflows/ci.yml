name: CI

on:
  push:
    branches-ignore:
      - 'release-*'
    tags-ignore:
      - '*.*'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        k8s: [v1.12.10, v1.14.6, v1.16.2]
        db: [2.0.4]
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@master
      with:
        version: latest

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Run checks
      run: |
        sudo apt-get -qq update || true
        sudo apt-get install -y bzr
        make ci

    - name: Build
      env:
        REGISTRY: kubedbci
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
      run: |
        docker login --username ${USERNAME} --password ${DOCKER_TOKEN}
        make push

    - name: Create Kubernetes ${{ matrix.k8s }} cluster
      id: kind
      uses: engineerd/setup-kind@v0.1.0
      with:
        config: hack/kubernetes/kind.yaml
        image: kindest/node:${{ matrix.k8s }}

    - name: Prepare cluster for testing
      id: local-path
      env:
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        USERNAME: 1gtm
        REGISTRY_SECRET: regcred
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo
        echo "waiting for nodes to be ready ..."
        kubectl wait --for=condition=Ready nodes --all --timeout=5m
        kubectl get nodes
        echo
        echo "installing local-path provisioner ..."
        kubectl delete storageclass --all
        kubectl apply -f https://github.com/rancher/local-path-provisioner/raw/v0.0.11/deploy/local-path-storage.yaml
        kubectl wait --for=condition=Ready pods -n local-path-storage --all --timeout=5m
        kubectl apply -f hack/kubernetes/storageclass/standard.yaml
        echo
        echo "install helm 3"
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        echo
        echo "create docker-registry secret"
        kubectl create secret docker-registry ${REGISTRY_SECRET} --namespace=kube-system --docker-server=https://index.docker.io/v1/ --docker-username=${USERNAME} --docker-password=${DOCKER_TOKEN}

    - name: Check out installer
      run: |
        cd ..
        git clone https://github.com/kubedb/installer.git
        cd installer
        # git checkout master
        git checkout percona

    - name: Install MySQL operator
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        env REGISTRY=alittleprogramming MYSQL_TAG=github-e2e-dbg_linux_amd64 make mysql-install || true
        kubectl get pods --all-namespaces
        kubectl describe -n kube-system deploy/kubedb-mysql
        sleep 60
        kubectl logs -n kube-system deploy/kubedb-mysql
        echo "----------------"
        kubectl get crd
        kubectl get mysqlversion --all-namespaces

    - name: Install Percona-XtraDB operator
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        env REGISTRY=alittleprogramming PERCONA_XTRADB_TAG=matrix-test-dbg_linux_amd64 make percona-xtradb-install || true
        kubectl get pods --all-namespaces
        kubectl describe -n kube-system deploy/kubedb-percona-xtradb
        sleep 60
        kubectl logs -n kube-system deploy/kubedb-percona-xtradb
        echo "----------------"
        kubectl get crd
        kubectl get pxversion --all-namespaces

    - name: Run e2e tests
      env:
        REGISTRY: kubedbci
        REGISTRY_SECRET: regcred
        TEST_CREDENTIALS: ${{ secrets.TEST_CREDENTIALS }}
        GOOGLE_SERVICE_ACCOUNT_JSON_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_KEY }}
      run: |
        export KUBECONFIG="$(kind get kubeconfig-path)"
        echo "preparing test credentials"
        mkdir -p hack/config
        echo -n "$TEST_CREDENTIALS" > hack/config/.env
        echo >> hack/config/.env
        echo "GOOGLE_SERVICE_ACCOUNT_JSON_KEY=$(echo $GOOGLE_SERVICE_ACCOUNT_JSON_KEY)" >> hack/config/.env
        make install
        echo
        make e2e-parallel TEST_ARGS="--proxysql-catalog=${{ matrix.db }}" || (kubectl describe deployment -n kube-system kubedb; kubectl logs -n kube-system deployment/kubedb; kubectl describe deployment -n kube-system kubedb-mysql; kubectl logs -n kube-system deployment/kubedb-mysql operator; kubectl describe deployment -n kube-system kubedb-percona-xtradb; kubectl logs -n kube-system deployment/kubedb-percona-xtradb operator; exit 1;)
